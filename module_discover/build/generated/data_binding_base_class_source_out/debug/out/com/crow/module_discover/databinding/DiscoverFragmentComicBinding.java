// Generated by view binder compiler. Do not edit!
package com.crow.module_discover.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.crow.module_discover.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.scwang.smart.refresh.layout.SmartRefreshLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DiscoverFragmentComicBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton discoverComicBottom;

  @NonNull
  public final MaterialButtonToggleGroup discoverComicButtonGroup;

  @NonNull
  public final MaterialButton discoverComicEdit;

  @NonNull
  public final MaterialButton discoverComicHot;

  @NonNull
  public final SmartRefreshLayout discoverComicRefresh;

  @NonNull
  public final RecyclerView discoverComicRv;

  @NonNull
  public final TextView discoverComicTagText;

  @NonNull
  public final TextView discoverComicTextPos;

  @NonNull
  public final TextView discoverComicTipsError;

  @NonNull
  public final MaterialButton discoverComicTop;

  @NonNull
  public final MaterialButton discoverComicUpdate;

  private DiscoverFragmentComicBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton discoverComicBottom,
      @NonNull MaterialButtonToggleGroup discoverComicButtonGroup,
      @NonNull MaterialButton discoverComicEdit, @NonNull MaterialButton discoverComicHot,
      @NonNull SmartRefreshLayout discoverComicRefresh, @NonNull RecyclerView discoverComicRv,
      @NonNull TextView discoverComicTagText, @NonNull TextView discoverComicTextPos,
      @NonNull TextView discoverComicTipsError, @NonNull MaterialButton discoverComicTop,
      @NonNull MaterialButton discoverComicUpdate) {
    this.rootView = rootView;
    this.discoverComicBottom = discoverComicBottom;
    this.discoverComicButtonGroup = discoverComicButtonGroup;
    this.discoverComicEdit = discoverComicEdit;
    this.discoverComicHot = discoverComicHot;
    this.discoverComicRefresh = discoverComicRefresh;
    this.discoverComicRv = discoverComicRv;
    this.discoverComicTagText = discoverComicTagText;
    this.discoverComicTextPos = discoverComicTextPos;
    this.discoverComicTipsError = discoverComicTipsError;
    this.discoverComicTop = discoverComicTop;
    this.discoverComicUpdate = discoverComicUpdate;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DiscoverFragmentComicBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DiscoverFragmentComicBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.discover_fragment_comic, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DiscoverFragmentComicBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.discover_comic_bottom;
      MaterialButton discoverComicBottom = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicBottom == null) {
        break missingId;
      }

      id = R.id.discover_comic_button_group;
      MaterialButtonToggleGroup discoverComicButtonGroup = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicButtonGroup == null) {
        break missingId;
      }

      id = R.id.discover_comic_edit;
      MaterialButton discoverComicEdit = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicEdit == null) {
        break missingId;
      }

      id = R.id.discover_comic_hot;
      MaterialButton discoverComicHot = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicHot == null) {
        break missingId;
      }

      id = R.id.discover_comic_refresh;
      SmartRefreshLayout discoverComicRefresh = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicRefresh == null) {
        break missingId;
      }

      id = R.id.discover_comic_rv;
      RecyclerView discoverComicRv = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicRv == null) {
        break missingId;
      }

      id = R.id.discover_comic_tag_text;
      TextView discoverComicTagText = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicTagText == null) {
        break missingId;
      }

      id = R.id.discover_comic_text_pos;
      TextView discoverComicTextPos = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicTextPos == null) {
        break missingId;
      }

      id = R.id.discover_comic_tips_error;
      TextView discoverComicTipsError = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicTipsError == null) {
        break missingId;
      }

      id = R.id.discover_comic_top;
      MaterialButton discoverComicTop = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicTop == null) {
        break missingId;
      }

      id = R.id.discover_comic_update;
      MaterialButton discoverComicUpdate = ViewBindings.findChildViewById(rootView, id);
      if (discoverComicUpdate == null) {
        break missingId;
      }

      return new DiscoverFragmentComicBinding((CoordinatorLayout) rootView, discoverComicBottom,
          discoverComicButtonGroup, discoverComicEdit, discoverComicHot, discoverComicRefresh,
          discoverComicRv, discoverComicTagText, discoverComicTextPos, discoverComicTipsError,
          discoverComicTop, discoverComicUpdate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
